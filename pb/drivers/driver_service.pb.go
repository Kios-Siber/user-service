// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: drivers/driver_service.proto

package drivers

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	generic "skeleton/pb/generic"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_drivers_driver_service_proto protoreflect.FileDescriptor

var file_drivers_driver_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x1a, 0x1c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xd9, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73,
	0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65,
	0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65,
	0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a,
	0x1b, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x3b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_drivers_driver_service_proto_goTypes = []interface{}{
	(*DriverListInput)(nil),     // 0: skeleton.DriverListInput
	(*Driver)(nil),              // 1: skeleton.Driver
	(*generic.Id)(nil),          // 2: skeleton.Id
	(*Drivers)(nil),             // 3: skeleton.Drivers
	(*generic.BoolMessage)(nil), // 4: skeleton.BoolMessage
}
var file_drivers_driver_service_proto_depIdxs = []int32{
	0, // 0: skeleton.DriversService.List:input_type -> skeleton.DriverListInput
	1, // 1: skeleton.DriversService.Create:input_type -> skeleton.Driver
	1, // 2: skeleton.DriversService.Update:input_type -> skeleton.Driver
	2, // 3: skeleton.DriversService.Delete:input_type -> skeleton.Id
	3, // 4: skeleton.DriversService.List:output_type -> skeleton.Drivers
	1, // 5: skeleton.DriversService.Create:output_type -> skeleton.Driver
	1, // 6: skeleton.DriversService.Update:output_type -> skeleton.Driver
	4, // 7: skeleton.DriversService.Delete:output_type -> skeleton.BoolMessage
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_drivers_driver_service_proto_init() }
func file_drivers_driver_service_proto_init() {
	if File_drivers_driver_service_proto != nil {
		return
	}
	file_drivers_driver_message_proto_init()
	file_drivers_driver_input_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drivers_driver_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drivers_driver_service_proto_goTypes,
		DependencyIndexes: file_drivers_driver_service_proto_depIdxs,
	}.Build()
	File_drivers_driver_service_proto = out.File
	file_drivers_driver_service_proto_rawDesc = nil
	file_drivers_driver_service_proto_goTypes = nil
	file_drivers_driver_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriversServiceClient is the client API for DriversService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriversServiceClient interface {
	List(ctx context.Context, in *DriverListInput, opts ...grpc.CallOption) (*Drivers, error)
	Create(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error)
	Update(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error)
	Delete(ctx context.Context, in *generic.Id, opts ...grpc.CallOption) (*generic.BoolMessage, error)
}

type driversServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriversServiceClient(cc grpc.ClientConnInterface) DriversServiceClient {
	return &driversServiceClient{cc}
}

func (c *driversServiceClient) List(ctx context.Context, in *DriverListInput, opts ...grpc.CallOption) (*Drivers, error) {
	out := new(Drivers)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Create(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error) {
	out := new(Driver)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Update(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error) {
	out := new(Driver)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Delete(ctx context.Context, in *generic.Id, opts ...grpc.CallOption) (*generic.BoolMessage, error) {
	out := new(generic.BoolMessage)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriversServiceServer is the server API for DriversService service.
type DriversServiceServer interface {
	List(context.Context, *DriverListInput) (*Drivers, error)
	Create(context.Context, *Driver) (*Driver, error)
	Update(context.Context, *Driver) (*Driver, error)
	Delete(context.Context, *generic.Id) (*generic.BoolMessage, error)
}

// UnimplementedDriversServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDriversServiceServer struct {
}

func (*UnimplementedDriversServiceServer) List(context.Context, *DriverListInput) (*Drivers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDriversServiceServer) Create(context.Context, *Driver) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDriversServiceServer) Update(context.Context, *Driver) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDriversServiceServer) Delete(context.Context, *generic.Id) (*generic.BoolMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterDriversServiceServer(s *grpc.Server, srv DriversServiceServer) {
	s.RegisterService(&_DriversService_serviceDesc, srv)
}

func _DriversService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).List(ctx, req.(*DriverListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Driver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Create(ctx, req.(*Driver))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Driver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Update(ctx, req.(*Driver))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(generic.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Delete(ctx, req.(*generic.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriversService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skeleton.DriversService",
	HandlerType: (*DriversServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DriversService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DriversService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriversService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriversService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drivers/driver_service.proto",
}
